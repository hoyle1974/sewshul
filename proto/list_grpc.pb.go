// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/list.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SocialListService_GetSocialList_FullMethodName        = "/proto.SocialListService/GetSocialList"
	SocialListService_AddToSocialList_FullMethodName      = "/proto.SocialListService/AddToSocialList"
	SocialListService_RemoveFromSocialList_FullMethodName = "/proto.SocialListService/RemoveFromSocialList"
)

// SocialListServiceClient is the client API for SocialListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocialListServiceClient interface {
	GetSocialList(ctx context.Context, in *SocialListRequest, opts ...grpc.CallOption) (*SocialListResponse, error)
	AddToSocialList(ctx context.Context, in *AddToSocialListRequest, opts ...grpc.CallOption) (*AddToSocialListResponse, error)
	RemoveFromSocialList(ctx context.Context, in *RemoveFromSocialListRequest, opts ...grpc.CallOption) (*RemoveFromSocialListResponse, error)
}

type socialListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSocialListServiceClient(cc grpc.ClientConnInterface) SocialListServiceClient {
	return &socialListServiceClient{cc}
}

func (c *socialListServiceClient) GetSocialList(ctx context.Context, in *SocialListRequest, opts ...grpc.CallOption) (*SocialListResponse, error) {
	out := new(SocialListResponse)
	err := c.cc.Invoke(ctx, SocialListService_GetSocialList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialListServiceClient) AddToSocialList(ctx context.Context, in *AddToSocialListRequest, opts ...grpc.CallOption) (*AddToSocialListResponse, error) {
	out := new(AddToSocialListResponse)
	err := c.cc.Invoke(ctx, SocialListService_AddToSocialList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialListServiceClient) RemoveFromSocialList(ctx context.Context, in *RemoveFromSocialListRequest, opts ...grpc.CallOption) (*RemoveFromSocialListResponse, error) {
	out := new(RemoveFromSocialListResponse)
	err := c.cc.Invoke(ctx, SocialListService_RemoveFromSocialList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocialListServiceServer is the server API for SocialListService service.
// All implementations must embed UnimplementedSocialListServiceServer
// for forward compatibility
type SocialListServiceServer interface {
	GetSocialList(context.Context, *SocialListRequest) (*SocialListResponse, error)
	AddToSocialList(context.Context, *AddToSocialListRequest) (*AddToSocialListResponse, error)
	RemoveFromSocialList(context.Context, *RemoveFromSocialListRequest) (*RemoveFromSocialListResponse, error)
	mustEmbedUnimplementedSocialListServiceServer()
}

// UnimplementedSocialListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSocialListServiceServer struct {
}

func (UnimplementedSocialListServiceServer) GetSocialList(context.Context, *SocialListRequest) (*SocialListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSocialList not implemented")
}
func (UnimplementedSocialListServiceServer) AddToSocialList(context.Context, *AddToSocialListRequest) (*AddToSocialListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToSocialList not implemented")
}
func (UnimplementedSocialListServiceServer) RemoveFromSocialList(context.Context, *RemoveFromSocialListRequest) (*RemoveFromSocialListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromSocialList not implemented")
}
func (UnimplementedSocialListServiceServer) mustEmbedUnimplementedSocialListServiceServer() {}

// UnsafeSocialListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocialListServiceServer will
// result in compilation errors.
type UnsafeSocialListServiceServer interface {
	mustEmbedUnimplementedSocialListServiceServer()
}

func RegisterSocialListServiceServer(s grpc.ServiceRegistrar, srv SocialListServiceServer) {
	s.RegisterService(&SocialListService_ServiceDesc, srv)
}

func _SocialListService_GetSocialList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SocialListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialListServiceServer).GetSocialList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialListService_GetSocialList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialListServiceServer).GetSocialList(ctx, req.(*SocialListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialListService_AddToSocialList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToSocialListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialListServiceServer).AddToSocialList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialListService_AddToSocialList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialListServiceServer).AddToSocialList(ctx, req.(*AddToSocialListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialListService_RemoveFromSocialList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromSocialListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialListServiceServer).RemoveFromSocialList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialListService_RemoveFromSocialList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialListServiceServer).RemoveFromSocialList(ctx, req.(*RemoveFromSocialListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SocialListService_ServiceDesc is the grpc.ServiceDesc for SocialListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SocialListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SocialListService",
	HandlerType: (*SocialListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSocialList",
			Handler:    _SocialListService_GetSocialList_Handler,
		},
		{
			MethodName: "AddToSocialList",
			Handler:    _SocialListService_AddToSocialList_Handler,
		},
		{
			MethodName: "RemoveFromSocialList",
			Handler:    _SocialListService_RemoveFromSocialList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/list.proto",
}
